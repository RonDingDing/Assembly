dosbox 
mount d 路径
debug.exe

段地址 * 16 +偏移地址
1000:00 = 1000 * 16 + 00 = 10000

-r 查看目前各寄存器状态
-a 编辑 cs:ip 汇编代码
-e 1000:00 编辑 10000 的二进制内容
-d 1000:00 查看 10000 的二进制数字，不加地址是 cs:ip
-u 1000:00 查看 10000 的汇编代码，不加地址是 cs:ip
-t 单步执行 cs:ip 代码
-g 跳到某一行
-p 执行完循环

mov ax, [0]  = mov ax, ds:[0]
mov ax, [bx] =  mov ax, ds:[bx]
ax 十六位 高八位：ah  低八位：al

add ax, 8  寄存器， 数据
add ax, bx 寄存器，寄存器
add ax, [0]寄存器，内存单元
add [0], ax内存单元，寄存器


任何时刻，ss:sp指向栈顶元素
push ax 将ax的值（16位）移动到栈ss:sp中，可以是寄存器、段寄存器、内存单元，sp = sp-2
pop ax 将栈ss:sp中的值移动到ax，可以是寄存器、段寄存器、内存单元，sp = sp + 2
inc ax 将ax的值+1
dec ax 将ax的值-1


assume cs:codesg
codesg segment
    mov ax, 0123H
    mov bx, 0456H
    add ax, bx
    add ax, ax

    mov ax, 4c00H
    int 21H
codesg ends
end


编译程序： masm p1.asm 然后 link p1.obj，简便模式是加上分号

()表示指针，可以是寄存器、段寄存器、内存单元的物理地址

(ax) (ds) (al) (cx) (2000h) ((ds) * 16 + (bx))


mov ax, [2]  == (ax) = ((ds) * 16 + 2)
mov [2], ax  == ((ds) * 16 + 2) = (ax) 
add ax,  bx  == (ax) = (ax) + (bx)
push ax      == (sp) = (sp) - 2 ; ((ss) * 16 + (sp)) = (ax) 
pop ax       == (ax) = ((ss) * 16 + (sp)) ; (sp) = (sp) + 2
mov ax, (bx) == (ax) = ((ds) * 16 + (bx))
and al, 10010000 将ax的低位八字节与10010000进行与操作
or  al, 10010000 将ax的低位八字节与10010000进行或操作

在ASCII码中，第五位是0表示大写，第五位是1表示小写

cx 会在每一次循环减一，不为0则继续回到s

assume cs:code
code segment
    mov ax, 2

    mov cx, 11  
s:  add ax, ax
    loop s

    mov ax, 4c00H
    int 21H
code ends
end

程序被DOS加载后，ds中存放着程序所在内存区的段地址，这个内存区的偏移地址为0，则程序所在的内存区地址为ds:0
这个内存区的前256个字节存放的是PSP，DOS用来和程序进行通信。从256字节（10H）处向后的空间存放的是程序。

在汇编源程序中，数据不能以字母开头

mov ax, [bx+200] == (ax) = ((ds) * 16 + (bx) + 200) == mov ax, 200[bx] == mov ax, [bx].200

si di 的功能和bx相近，但是si和di不能分成两个8位寄存器。

mov bx, 0/mov ax,[bx] == mov si, 0/mov ax,[si] == mov di, 0/mov ax,[di]

mov ax, [bx+si] == (ax) = ((ds) * 16 + (bx) + (si)) == mov ax, [bx][si]

mov ax, [bx+si+200] == mov ax, [bx+200+si] == mov ax, [200+bx+si] == mov ax, 200[bx][si] == mov ax, [bx].200[si] == mov ax, [bx][si].200

段寄存器包括：ds ss cs es 
寄存器包括：  ax    bx    cx    dx    sp bp si di
             ah al bh bl ch cl dh dl

bx si di bp 可用于 [] 中

只能如此组合
mov ax, [bx]
mov ax, [si]
mov ax, [di]
mov ax, [bp]
mov ax, [bx+si]
mov ax, [bx+di]
mov ax, [bp+si]
mov ax, [bp+di]
mov ax, [bx+si+idata]
mov ax, [bx+di+idata]
mov ax, [bp+si+idata]
mov ax, [bp+di+idata]

使用寄存器bp，若没有显性给出段地址，段地址默认在 ss 中。
mov ax, [bp] == (ax) =((ss) * 16 +(bp))
mov ax, [bp+idata] == (ax) =((ss) * 16 +(bp) + idata)


立即数执行前在CPU的指令缓冲器中
寄存器的数据储存在CPU中
段寄存器的数据储存在内存中

1 dword = 2 word = 4 bytes
  dd        dw       db

若 2000:1000 FF FF FF FF FF 
执行
mov ax, 2000h
mov ds, ax
mov byte ptr [1000H], 1
会变成
2000:1000 01 FF FF FF FF

执行
mov ax, 2000h
mov ds, ax
mov word ptr [1000H], 1
会变成
2000:1000 01 00 FF FF FF 

push只能进行字(word)操作


div
除数：有8位和16位两种
被除数：默认放在ax或高位dx、低位ax中，如果除数为8位，被除数位16位，放在ax中；如果除数为16位，被除数为32位，dx存放高16位，ax存放低16位
结果：如果除数为8位，al储存商， ah储存余数；如果除数为16位，ax储存商，dx储存余数
div byte ptr ds:[0]  == (al) = (ax) / ((ds) * 16 + 0) 的商以及 (ah) = (ax) / ((ds) * 16 + 0) 的余数

div word ptr es:[0]  == (al) = (ax) / ((ds) * 16 + 0) 的商以及 (ah) = (ax) / ((ds) * 16 + 0) 的余数


db 3 dup (0) == db 0,0,0
db 3 dup (0,1,2) =  db 0,1,2,0,1,2,0,1,2

db 重复的次数 dup (重复的字节型数据)
dw 重复的次数 dup (重复的字型数据)
dd 重复的次数 dup (重复的双字型数据)


assume cs:codesg
codesg segment
start: mov ax, offset start ;这里位于CS:IP+0，所以等于mov ax, 0
    s: mov ax, offset s     ;上一条指令占三个字节，所以这里是mov ax, 3
codesg ends
end start


jmp 可以只修改ip 也可以同时修改cs和ip
（1）转移的目的地址
（2）转移的距离（段间转移、段内短转移，段内近转移）

CPU 在执行jmp指令时不需要转移的目的地址，机器码中的后8位（两个数字）是转移的位移（以补码表示）
jmp short 标号 —— 直接跳到标号所在的段，机器码中的后8位（两个数字）是转移的位移（以补码表示）
jmp near ptr 标号 与上面相同，但是可以跳16位
jmp far ptr 标号 与上面相同，会在后面几位找到段地址和偏移地址


mov ax, 0123H
mov [bx], ax
jmp word ptr [bx] 
执行这三条会让ip变成0123，cs不变

mov ax, 0123H
mov ds:[0], ax          ; ds:0000 23 01
mov word ptr ds:[2], 0  ; ds:0000 23 01 00 00
jmp dword ptr ds:[0] 
执行这三条 cs:ip 会指向 0000:0123

jcxz 是有条件转移指令，机器码中包含位移，不是目的地址，对ip的修改范围是-128-127

jxcz 标号相当于  if ((cx) == 0) jmp short 标号
loop 标号相当于  cx --; if (cx != 0) jmp short 标号

ret指令用栈中的数据修改ip的内容从而实现近转移
retf指令用栈中的数据修改cs和ip的内容，从而实现远转移

ret == (ip) = ((ss) * 16 + (sp)); (sp) = (sp) +2
retf == (ip) = ((ss) * 16 + (sp)); (sp) = (sp) +2; (cs) = ((ss) * 16 + (sp)); (sp) = (sp) + 2 

call 标号 == (sp) = (sp) - 2; ((ss) * 16 + (sp)) = (ip); (ip) = (ip) + 16位位移
相当于 push ip; jump near ptr

call far ptr 标号 == (sp) = (sp) - 2; ((ss) * 16 + (sp)) = (cs); (sp) = (sp) - 2; ((ss) * 16 + (sp)) = (ip)
(cs) = 标号所在的段的段地址， (ip) = 标号在段中的偏移地址
相当于 push cs; push ip; jmp far ptr 标号

call 16位reg == (sp) = (sp) - 2; ((ss) * 16 + (sp)) = (cs); (ip) = (16位reg)
相当于 push ip; jmp 16位reg

call word ptr 内存单元地址 == push ip; jmp word ptr 内存单元地址
call dword ptr 内存单元地址 == push ip; jmp dword ptr 内存单元地址


call ret 可以连用，作为函数的持续调用

mul 两个相乘的数，要么都是8位，要么都是16位，如果是8位，一个放在al中，一个放在8位reg或内存字节单元中；
如果是16位，一个放在ax中，另一个放在16位reg或内存单元中

如果8位乘法，结果在ax中；如果是16位乘法，结果高位放在dx中，低位放在ax中。

mul word ptr ds:[0] == (ax) = (al) * ((ds) * 16 + 0)

mul word ptr [bx+si+8] == (ax) = (ax) * ((ds) * 16 + (bx) + (si) + 8) 结果的低16位；
                          (dx) = (ax) * ((ds) * 16 + (bx) + (si) + 8) 结果的高16位。